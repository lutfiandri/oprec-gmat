{"version":3,"sources":["components/Navbar.js","components/Chart.js","components/SidebarAltitude.js","components/Dummy.js","views/Page1.js","views/Page2.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","active","useLocation","pathname","className","to","Chart","id","times","plus","row","setAltitude","useState","last","setLast","counter","setCounter","rand","Math","random","useEffect","data","x","Date","y","mode","line","color","Plotly","newPlot","autosize","margin","l","r","b","t","pad","setInterval","time","temp","toFixed","update","minuteView","xaxis","range","setSeconds","getSeconds","relayout","extendTraces","SidebarAltitude","altitude","Dummy","text","Page1","Page2","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bf34d07.chunk.js","sourcesContent":["// import { useState } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nconst Navbar = () => {\n  const active = useLocation().pathname;\n\n  return (\n    <header className=\"sticky top-0 z-50\">\n      <nav className=\"flex space-x-3 px-10 items-center font-bold bg-gray-800\">\n        <div className=\"text-2xl mr-5\">GMAT</div>\n        <NavLink\n          to=\"/\"\n          className={`py-1 px-8 rounded-md m-3 ${active === '/' ? 'bg-gray-400' : ' bg-gray-500'}`}\n        >\n          1\n        </NavLink>\n        <NavLink\n          to=\"/2\"\n          className={`py-1 px-8 rounded-md m-3 ${active === '/2' ? 'bg-gray-400' : ' bg-gray-500'}`}\n        >\n          2\n        </NavLink>\n      </nav>\n    </header>\n  );\n};\n\nexport default Navbar;\n","import { useState, useEffect } from 'react';\nimport Plotly from 'plotly.js-dist';\n\nconst Chart = ({ id, times, plus, row, setAltitude }) => {\n  const [last, setLast] = useState(0);\n  const [counter, setCounter] = useState(0);\n\n  const rand = () => {\n    return Math.random() * times + plus;\n  };\n\n  const goInterval = () => {\n    setInterval(() => {\n      setCounter(rand());\n    }, 200);\n  };\n\n  useEffect(() => {\n    const initTime = new Date();\n\n    const data = [\n      {\n        x: [initTime],\n        y: [last],\n        mode: 'lines',\n        line: { color: '#4B5563' },\n      },\n    ];\n\n    const layout = {\n      autosize: true,\n      margin: {\n        l: 40,\n        r: 10,\n        b: 40,\n        t: 20,\n        pad: 0,\n      },\n      // paper_bgcolor: '#7f7f7f',\n      // plot_bgcolor: '#c7c7c7',\n    };\n\n    Plotly.newPlot(id, data, layout);\n    goInterval();\n  }, []);\n\n  useEffect(() => {\n    const time = new Date();\n\n    const temp = rand().toFixed(2);\n    setLast(temp);\n    if (id === 'altitude') {\n      setAltitude(temp);\n    }\n\n    const update = {\n      x: [[time]],\n      y: [[temp]],\n    };\n\n    const olderTime = time.setSeconds(time.getSeconds() - 60);\n    const futureTime = time.setSeconds(time.getSeconds() + 60);\n\n    const minuteView = {\n      xaxis: {\n        // type: 'date',\n        range: [olderTime, futureTime],\n      },\n      // yaxis: {\n      //   range: [-180, 180],\n      // },\n    };\n\n    Plotly.relayout(id, minuteView);\n    Plotly.extendTraces(id, update, [0]);\n  }, [counter]);\n\n  // const rows = () => {\n  //   return\n  // }\n\n  return (\n    <div\n      className={`bg-white rounded-md p-2 w-full h-full col-span-5 ${\n        row === '2' ? 'row-span-2' : 'row-span-1'\n      }`}\n    >\n      <div className=\"h-6 text-center\">\n        {id} : {last}\n      </div>\n      <div className={`${row === '2' ? 'h-134' : 'h-60'}`}>\n        <div className=\"w-full h-full\" id={id} />\n      </div>\n    </div>\n  );\n};\n\nexport default Chart;\n","const SidebarAltitude = ({ altitude, setAltitude, row }) => {\n  return (\n    <div\n      className={`bg-white flex flex-col items-center rounded-md p-2 h-full w-full ${\n        row === '2' ? 'row-span-2' : 'row-span-1'\n      }`}\n    >\n      <div className=\"text-center\">{altitude} m</div>\n      <div className=\"bg-gray-800 w-1 h-full my-4\" />\n    </div>\n  );\n};\n\nexport default SidebarAltitude;\n","const Dummy = ({ text }) => {\n  return (\n    <div className=\"bg-white rounded-md p-2 col-span-5\">\n      <div className=\"h-60 flex justify-center items-center\">{text}</div>\n    </div>\n  );\n};\n\nexport default Dummy;\n","import Chart from '../components/Chart';\nimport SidebarAltitude from '../components/SidebarAltitude';\nimport Dummy from '../components/Dummy';\n\nconst Page1 = ({ altitude }) => {\n  return (\n    <div className=\"px-10 py-8 grid grid-cols-11 w-full text-gray-800 gap-4\">\n      <SidebarAltitude altitude={altitude} row=\"2\" />\n      <Chart id=\"yaw\" times={1} plus={-0.5} />\n      <Chart id=\"pitch\" times={1} plus={-0.5} />\n      <Chart id=\"roll\" times={1} plus={-0.5} />\n      <Dummy text=\"3D Model | (Coming Soon)\" />\n    </div>\n  );\n};\n\nexport default Page1;\n","import Chart from '../components/Chart';\nimport SidebarAltitude from '../components/SidebarAltitude';\n\nconst Page2 = ({ altitude, setAltitude }) => {\n  return (\n    <div className=\"px-10 py-8 grid grid-cols-11 w-full text-gray-800 gap-4\">\n      <SidebarAltitude altitude={altitude} row=\"2\" />\n      <Chart id=\"altitude\" times={10} plus={34} row=\"2\" setAltitude={setAltitude} />\n      <Chart id=\"pressure\" times={11} plus={112} row=\"1\" />\n      <Chart id=\"temperature\" times={3} plus={32} row=\"1\" />\n    </div>\n  );\n};\n\nexport default Page2;\n","import './tailwind-compiled.css';\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport Page1 from './views/Page1';\nimport Page2 from './views/Page2';\n\nconst App = () => {\n  const [altitude, setAltitude] = useState(0);\n  return (\n    <div className=\"relative min-h-screen bg-gray-700 flex flex-col text-white\">\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\">\n            <Page1 altitude={altitude} />\n          </Route>\n          <Route exact path=\"/2\">\n            <Page2 altitude={altitude} setAltitude={setAltitude} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}